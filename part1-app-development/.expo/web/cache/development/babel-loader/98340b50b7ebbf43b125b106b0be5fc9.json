{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNKeychainManager = NativeModules.RNKeychainManager;\nexport var SECURITY_LEVEL = Object.freeze({\n  ANY: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_ANY,\n  SECURE_SOFTWARE: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE,\n  SECURE_HARDWARE: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE\n});\nexport var ACCESSIBLE = Object.freeze({\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: 'AccessibleAfterFirstUnlockThisDeviceOnly',\n  ALWAYS_THIS_DEVICE_ONLY: 'AccessibleAlwaysThisDeviceOnly'\n});\nexport var ACCESS_CONTROL = Object.freeze({\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode'\n});\nexport var AUTHENTICATION_TYPE = Object.freeze({\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics'\n});\nexport var BIOMETRY_TYPE = Object.freeze({\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint',\n  FACE: 'Face',\n  IRIS: 'Iris'\n});\nexport var STORAGE_TYPE = Object.freeze({\n  FB: 'FacebookConceal',\n  AES: 'KeystoreAESCBC',\n  RSA: 'KeystoreRSAECB',\n  KC: 'keychain'\n});\nexport var SECURITY_RULES = Object.freeze({\n  NONE: 'none',\n  AUTOMATIC_UPGRADE: 'automaticUpgradeToMoreSecuredStorage'\n});\nvar AUTH_PROMPT_DEFAULTS = {\n  title: 'Authenticate to retrieve secret',\n  cancel: 'Cancel'\n};\n\nfunction normalizeServiceOption(serviceOrOptions) {\n  if (typeof serviceOrOptions === 'string') {\n    console.warn(\"You passed a service string as an argument to one of the react-native-keychain functions.\\n      This way of passing service is deprecated and will be removed in a future major.\\n      Please update your code to use { service: \" + JSON.stringify(serviceOrOptions) + \" }\");\n    return {\n      service: serviceOrOptions\n    };\n  }\n\n  return serviceOrOptions || {};\n}\n\nfunction normalizeOptions(serviceOrOptions) {\n  var options = _objectSpread({}, normalizeServiceOption(serviceOrOptions));\n\n  var authenticationPrompt = options.authenticationPrompt;\n\n  if (typeof authenticationPrompt === 'string') {\n    console.warn(\"You passed a authenticationPrompt string as an argument to one of the react-native-keychain functions.\\n      This way of passing authenticationPrompt is deprecated and will be removed in a future major.\\n      Please update your code to use { authenticationPrompt: { title: \" + JSON.stringify(authenticationPrompt) + \" }\");\n    options.authenticationPrompt = _objectSpread(_objectSpread({}, AUTH_PROMPT_DEFAULTS), {}, {\n      title: authenticationPrompt\n    });\n  } else {\n    options.authenticationPrompt = _objectSpread(_objectSpread({}, AUTH_PROMPT_DEFAULTS), authenticationPrompt);\n  }\n\n  return options;\n}\n\nexport function setGenericPassword(username, password, serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.setGenericPasswordForOptions(options, username, password);\n}\nexport function getGenericPassword(serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.getGenericPasswordForOptions(options);\n}\nexport function resetGenericPassword(serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.resetGenericPasswordForOptions(options);\n}\nexport function getAllGenericPasswordServices() {\n  return RNKeychainManager.getAllGenericPasswordServices();\n}\nexport function hasInternetCredentials(server) {\n  return RNKeychainManager.hasInternetCredentialsForServer(server);\n}\nexport function setInternetCredentials(server, username, password, options) {\n  return RNKeychainManager.setInternetCredentialsForServer(server, username, password, options);\n}\nexport function getInternetCredentials(server, options) {\n  return RNKeychainManager.getInternetCredentialsForServer(server, normalizeOptions(options));\n}\nexport function resetInternetCredentials(server) {\n  return RNKeychainManager.resetInternetCredentialsForServer(server);\n}\nexport function getSupportedBiometryType() {\n  if (!RNKeychainManager.getSupportedBiometryType) {\n    return Promise.resolve(null);\n  }\n\n  return RNKeychainManager.getSupportedBiometryType();\n}\nexport function requestSharedWebCredentials() {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(new Error(\"requestSharedWebCredentials() is not supported on \" + Platform.OS + \" yet\"));\n  }\n\n  return RNKeychainManager.requestSharedWebCredentials();\n}\nexport function setSharedWebCredentials(server, username, password) {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(new Error(\"setSharedWebCredentials() is not supported on \" + Platform.OS + \" yet\"));\n  }\n\n  return RNKeychainManager.setSharedWebCredentialsForServer(server, username, password);\n}\nexport function canImplyAuthentication(options) {\n  if (!RNKeychainManager.canCheckAuthentication) {\n    return Promise.resolve(false);\n  }\n\n  return RNKeychainManager.canCheckAuthentication(options);\n}\nexport function getSecurityLevel(options) {\n  if (!RNKeychainManager.getSecurityLevel) {\n    return Promise.resolve(null);\n  }\n\n  return RNKeychainManager.getSecurityLevel(options);\n}\nexport default {\n  SECURITY_LEVEL: SECURITY_LEVEL,\n  ACCESSIBLE: ACCESSIBLE,\n  ACCESS_CONTROL: ACCESS_CONTROL,\n  AUTHENTICATION_TYPE: AUTHENTICATION_TYPE,\n  BIOMETRY_TYPE: BIOMETRY_TYPE,\n  STORAGE_TYPE: STORAGE_TYPE,\n  SECURITY_RULES: SECURITY_RULES,\n  getSecurityLevel: getSecurityLevel,\n  canImplyAuthentication: canImplyAuthentication,\n  getSupportedBiometryType: getSupportedBiometryType,\n  setInternetCredentials: setInternetCredentials,\n  getInternetCredentials: getInternetCredentials,\n  resetInternetCredentials: resetInternetCredentials,\n  setGenericPassword: setGenericPassword,\n  getGenericPassword: getGenericPassword,\n  getAllGenericPasswordServices: getAllGenericPasswordServices,\n  resetGenericPassword: resetGenericPassword,\n  requestSharedWebCredentials: requestSharedWebCredentials,\n  setSharedWebCredentials: setSharedWebCredentials\n};","map":{"version":3,"sources":["/Users/hidang/Desktop/momo-interview-project/node_modules/react-native-keychain/index.js"],"names":["RNKeychainManager","NativeModules","SECURITY_LEVEL","Object","freeze","ANY","SECURITY_LEVEL_ANY","SECURE_SOFTWARE","SECURITY_LEVEL_SECURE_SOFTWARE","SECURE_HARDWARE","SECURITY_LEVEL_SECURE_HARDWARE","ACCESSIBLE","WHEN_UNLOCKED","AFTER_FIRST_UNLOCK","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","WHEN_UNLOCKED_THIS_DEVICE_ONLY","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","ACCESS_CONTROL","USER_PRESENCE","BIOMETRY_ANY","BIOMETRY_CURRENT_SET","DEVICE_PASSCODE","APPLICATION_PASSWORD","BIOMETRY_ANY_OR_DEVICE_PASSCODE","BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE","AUTHENTICATION_TYPE","DEVICE_PASSCODE_OR_BIOMETRICS","BIOMETRICS","BIOMETRY_TYPE","TOUCH_ID","FACE_ID","FINGERPRINT","FACE","IRIS","STORAGE_TYPE","FB","AES","RSA","KC","SECURITY_RULES","NONE","AUTOMATIC_UPGRADE","AUTH_PROMPT_DEFAULTS","title","cancel","normalizeServiceOption","serviceOrOptions","console","warn","JSON","stringify","service","normalizeOptions","options","authenticationPrompt","setGenericPassword","username","password","setGenericPasswordForOptions","getGenericPassword","getGenericPasswordForOptions","resetGenericPassword","resetGenericPasswordForOptions","getAllGenericPasswordServices","hasInternetCredentials","server","hasInternetCredentialsForServer","setInternetCredentials","setInternetCredentialsForServer","getInternetCredentials","getInternetCredentialsForServer","resetInternetCredentials","resetInternetCredentialsForServer","getSupportedBiometryType","Promise","resolve","requestSharedWebCredentials","Platform","OS","reject","Error","setSharedWebCredentials","setSharedWebCredentialsForServer","canImplyAuthentication","canCheckAuthentication","getSecurityLevel"],"mappings":"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","sourcesContent":["// @flow\nimport { NativeModules, Platform } from 'react-native';\n\nconst { RNKeychainManager } = NativeModules;\n\nexport const SECURITY_LEVEL: {\n  ANY: string,\n  SECURE_SOFTWARE: string,\n  SECURE_HARDWARE: string,\n} = Object.freeze({\n  ANY: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_ANY,\n  SECURE_SOFTWARE:\n    RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE,\n  SECURE_HARDWARE:\n    RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE,\n});\n\nexport const ACCESSIBLE = Object.freeze({\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY:\n    'AccessibleAfterFirstUnlockThisDeviceOnly',\n  ALWAYS_THIS_DEVICE_ONLY: 'AccessibleAlwaysThisDeviceOnly',\n});\n\nexport const ACCESS_CONTROL = Object.freeze({\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode',\n});\n\nexport const AUTHENTICATION_TYPE = Object.freeze({\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics',\n});\n\nexport const BIOMETRY_TYPE = Object.freeze({\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint',\n  FACE: 'Face',\n  IRIS: 'Iris',\n});\n\nexport const STORAGE_TYPE = Object.freeze({\n  FB: 'FacebookConceal',\n  AES: 'KeystoreAESCBC',\n  RSA: 'KeystoreRSAECB',\n  KC: 'keychain', // <~ iOS only\n});\n\nexport const SECURITY_RULES = Object.freeze({\n  NONE: 'none',\n  AUTOMATIC_UPGRADE: 'automaticUpgradeToMoreSecuredStorage',\n});\n\nexport type SecAccessible = $Values<typeof ACCESSIBLE>;\n\nexport type SecAccessControl = $Values<typeof ACCESS_CONTROL>;\n\nexport type LAPolicy = $Values<typeof AUTHENTICATION_TYPE>;\n\nexport type SecMinimumLevel = $Values<typeof SECURITY_LEVEL>;\n\nexport type SecStorageType = $Values<typeof STORAGE_TYPE>;\n\nexport type SecSecurityRules = $Values<typeof SECURITY_RULES>;\n\nexport type SecBiometryType = $Values<typeof BIOMETRY_TYPE>;\n\nexport type AuthenticationPrompt = {|\n  title?: string,\n  subtitle?: string,\n  description?: string,\n  cancel?: string,\n|};\n\ntype BaseOptions = {|\n  accessControl?: SecAccessControl,\n  accessGroup?: string,\n  accessible?: SecAccessible,\n  authenticationType?: LAPolicy,\n  service?: string,\n  securityLevel?: SecMinimumLevel,\n  storage?: SecStorageType,\n  rules?: SecSecurityRules,\n|};\n\ntype NormalizedOptions = {\n  authenticationPrompt?: AuthenticationPrompt,\n  ...BaseOptions,\n};\n\nexport type Options = $Shape<{|\n  authenticationPrompt?: string | AuthenticationPrompt,\n  ...BaseOptions,\n|}>;\n\nexport type Result = {|\n  +service: string,\n  +storage: string,\n|};\n\nexport type UserCredentials = {|\n  +username: string,\n  +password: string,\n  ...Result,\n|};\n\nexport type SharedWebCredentials = {|\n  +server: string,\n  ...UserCredentials,\n|};\n\nconst AUTH_PROMPT_DEFAULTS = {\n  title: 'Authenticate to retrieve secret',\n  cancel: 'Cancel',\n};\n\nfunction normalizeServiceOption(serviceOrOptions?: string | Options): Options {\n  if (typeof serviceOrOptions === 'string') {\n    console.warn(\n      `You passed a service string as an argument to one of the react-native-keychain functions.\n      This way of passing service is deprecated and will be removed in a future major.\n      Please update your code to use { service: ${JSON.stringify(\n        serviceOrOptions\n      )} }`\n    );\n    return { service: serviceOrOptions };\n  }\n  return serviceOrOptions || {};\n}\n\nfunction normalizeOptions(\n  serviceOrOptions?: string | Options\n): NormalizedOptions {\n  let options = { ...normalizeServiceOption(serviceOrOptions) };\n  const { authenticationPrompt } = options;\n\n  if (typeof authenticationPrompt === 'string') {\n    console.warn(\n      `You passed a authenticationPrompt string as an argument to one of the react-native-keychain functions.\n      This way of passing authenticationPrompt is deprecated and will be removed in a future major.\n      Please update your code to use { authenticationPrompt: { title: ${JSON.stringify(\n        authenticationPrompt\n      )} }`\n    );\n    options.authenticationPrompt = {\n      ...AUTH_PROMPT_DEFAULTS,\n      title: authenticationPrompt,\n    };\n  } else {\n    options.authenticationPrompt = {\n      ...AUTH_PROMPT_DEFAULTS,\n      ...authenticationPrompt,\n    };\n  }\n\n  // $FlowFixMe >=0.107.x – remove in next major, when authenticationPrompt as string is removed\n  return options;\n}\n\n//* EXPORTS */\n\n/**\n * Saves the `username` and `password` combination for `service`.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ service, storage }` when successful\n */\nexport function setGenericPassword(\n  username: string,\n  password: string,\n  serviceOrOptions?: string | Options\n): Promise<false | Result> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.setGenericPasswordForOptions(\n    options,\n    username,\n    password\n  );\n}\n\n/**\n * Fetches login combination for `service`.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ service, username, password, storage }` when successful\n */\nexport function getGenericPassword(\n  serviceOrOptions?: string | Options\n): Promise<false | UserCredentials> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.getGenericPasswordForOptions(options);\n}\n\n/**\n * Deletes all generic password keychain entries for `service`.\n * @param {object} options An Keychain options object.\n * @return {Promise} Resolves to `true` when successful\n */\nexport function resetGenericPassword(\n  serviceOrOptions?: string | Options\n): Promise<boolean> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.resetGenericPasswordForOptions(options);\n}\n\n/**\n * Gets all `service` keys used in keychain entries.\n * @return {Promise} Resolves to an array of strings\n */\nexport function getAllGenericPasswordServices(): Promise<string[]> {\n  return RNKeychainManager.getAllGenericPasswordServices();\n}\n\n/**\n * Checks if we have a login combination for `server`.\n * @param {string} server URL to server.\n * @return {Promise} Resolves to `{service, storage}` when successful\n */\nexport function hasInternetCredentials(\n  server: string\n): Promise<false | Result> {\n  return RNKeychainManager.hasInternetCredentialsForServer(server);\n}\n\n/**\n * Saves the `username` and `password` combination for `server`.\n * @param {string} server URL to server.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{service, storage}` when successful\n */\nexport function setInternetCredentials(\n  server: string,\n  username: string,\n  password: string,\n  options?: Options\n): Promise<false | Result> {\n  return RNKeychainManager.setInternetCredentialsForServer(\n    server,\n    username,\n    password,\n    options\n  );\n}\n\n/**\n * Fetches login combination for `server`.\n * @param {string} server URL to server.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ server, username, password }` when successful\n */\nexport function getInternetCredentials(\n  server: string,\n  options?: Options\n): Promise<false | UserCredentials> {\n  return RNKeychainManager.getInternetCredentialsForServer(\n    server,\n    normalizeOptions(options)\n  );\n}\n\n/**\n * Deletes all internet password keychain entries for `server`.\n * @param {string} server URL to server.\n * @param {object} options Keychain options, iOS only\n * @return {Promise} Resolves to `true` when successful\n */\nexport function resetInternetCredentials(server: string): Promise<void> {\n  return RNKeychainManager.resetInternetCredentialsForServer(server);\n}\n\n/**\n * Get what type of Class 3 (strong) biometry support the device has.\n * @param {object} options An Keychain options object.\n * @return {Promise} Resolves to a `BIOMETRY_TYPE` when supported, otherwise `null`\n */\nexport function getSupportedBiometryType(): Promise<null | SecBiometryType> {\n  if (!RNKeychainManager.getSupportedBiometryType) {\n    return Promise.resolve(null);\n  }\n\n  return RNKeychainManager.getSupportedBiometryType();\n}\n\n//* IOS ONLY */\n\n/**\n * Asks the user for a shared web credential.\n * @return {Promise} Resolves to `{ server, username, password }` if approved and\n * `false` if denied and throws an error if not supported on platform or there's no shared credentials\n */\nexport function requestSharedWebCredentials(): Promise<\n  false | SharedWebCredentials\n> {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(\n      new Error(\n        `requestSharedWebCredentials() is not supported on ${Platform.OS} yet`\n      )\n    );\n  }\n  return RNKeychainManager.requestSharedWebCredentials();\n}\n\n/**\n * Sets a shared web credential.\n * @param {string} server URL to server.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @return {Promise} Resolves to `true` when successful\n */\nexport function setSharedWebCredentials(\n  server: string,\n  username: string,\n  password?: string\n): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(\n      new Error(\n        `setSharedWebCredentials() is not supported on ${Platform.OS} yet`\n      )\n    );\n  }\n  return RNKeychainManager.setSharedWebCredentialsForServer(\n    server,\n    username,\n    password\n  );\n}\n\n/**\n * Inquire if the type of local authentication policy (LAPolicy) is supported\n * on this device with the device settings the user chose.\n * @param {object} options LAPolicy option, iOS only\n * @return {Promise} Resolves to `true` when supported, otherwise `false`\n */\nexport function canImplyAuthentication(options?: Options): Promise<boolean> {\n  if (!RNKeychainManager.canCheckAuthentication) {\n    return Promise.resolve(false);\n  }\n  return RNKeychainManager.canCheckAuthentication(options);\n}\n\n//* ANDROID ONLY */\n\n/**\n * (Android only) Returns guaranteed security level supported by this library\n * on the current device.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `SECURITY_LEVEL` when supported, otherwise `null`.\n */\nexport function getSecurityLevel(\n  options?: Options\n): Promise<null | SecMinimumLevel> {\n  if (!RNKeychainManager.getSecurityLevel) {\n    return Promise.resolve(null);\n  }\n  return RNKeychainManager.getSecurityLevel(options);\n}\n\n/** Refs: https://www.saltycrane.com/cheat-sheets/flow-type/latest/ */\n\nexport default {\n  SECURITY_LEVEL,\n  ACCESSIBLE,\n  ACCESS_CONTROL,\n  AUTHENTICATION_TYPE,\n  BIOMETRY_TYPE,\n  STORAGE_TYPE,\n  SECURITY_RULES,\n  getSecurityLevel,\n  canImplyAuthentication,\n  getSupportedBiometryType,\n  setInternetCredentials,\n  getInternetCredentials,\n  resetInternetCredentials,\n  setGenericPassword,\n  getGenericPassword,\n  getAllGenericPasswordServices,\n  resetGenericPassword,\n  requestSharedWebCredentials,\n  setSharedWebCredentials,\n};\n"]},"metadata":{},"sourceType":"module"}